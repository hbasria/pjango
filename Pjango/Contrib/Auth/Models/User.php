<?php
/**
 * User
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */

class AnonymousUser {
    public $id = 0;
    
    function is_authenticated() {
        return false;
    }

    function has_perm() {
        return false;
    }

}

class User extends BaseUser
{

	/**
	 * user authentication
	 *
	 * @param string $username
	 * @param string $password
	 * @param string $userId for token base authentication
	 *
	 * @static
	 * @return User
	 */
	public static function authenticate($username = false, $password = false, $userId = false){
		 
		$q = Doctrine_Query::create()
			->from('User u')
			->leftJoin('u.Groups')
			->leftJoin('u.Permissions')
			->leftJoin('u.Site')
			->where('u.site_id = ?', 1);
	
		if($userId){
			$q->addWhere('u.id = ? AND u.is_active = ?', array($userId,1));
		}else {
			$q->addWhere('u.password = ? AND u.is_active = ?', array($password,1));
			$q->addWhere('u.username = ?', array($username));
		}
		 
		$user = $q->fetchOne();
		 
		if (!$user) throw new Exception(__('Authentication failed'));
		 
		//cooki set et beni hatırla için
		if (isset($_POST['remember_me'])){
			$user->set_cookie();
		}
	
		$user->last_login = date('Y-m-d H:i:s');
		$user->save();
		 
		$_SESSION['user'] = serialize($user);
		 
		return $user;
	}	
	
	/**
	 * change encrypted password
	 * @param string $newPassword
	 */
	function change_password($newPassword) {
		$this->password = self::getEncryptedPassword($newPassword);
		$this->save();
	}
		
	/**
	 * checks to see if the user is already registered
	 * @param string $email
	 * 
     * @static
     * @return User
	 */	
	public static function check_user($username, $email = false) {
		$q = Doctrine_Query::create()
			->from('User u');
		
		if($email){
			$q->where('u.username = ? OR u.email = ?', array($username, $email));
		}else {
			$q->where('u.username = ? OR u.email = ?', array($username, $username));
		}
		
		$user = $q->fetchOne();
		
		if($user) return $user;
		return false;
	}
	
	/**
	 * give the user logged into the system
	 *
	 * @static
	 * @return User
	 */	
    public static function current_user() {
        if (is_string($_SESSION['user'])){
            $user = unserialize($_SESSION['user']);
        }
        
        if ($user instanceof User){
            return $user;
        }
        
        if(is_array($_SESSION['user']) && isset($_SESSION['user']['id'])){
            $user = Doctrine_Query::create()
                ->from('User u')
                ->addWhere('u.id = ?', $_SESSION['user']['id'])
                ->fetchOne();
            $_SESSION['user'] = serialize($user);
        }
        /*
        elseif (isset($_COOKIE['rme'])){
            $pt = PjangoToken::check_token($_COOKIE['rme']);
        
            if ($pt){
                $user = User::authenticate(false, false, $pt->object_id);
            }
        }*/
        
        if ($user instanceof User){
            return $user;
        }else {
            return new AnonymousUser();
        }        
    }
    
    /**
     * getting all user permissions
     *
     * @return Array user permissions
     */
    function get_all_permissions() {
    	$user_permsArr = array();
    
    	foreach ($this->Permissions as $perm) {
    		$key = sprintf('%s.%s', $perm->ContentType->app_label, $perm->codename);
    		$user_permsArr[$key] = true;
    	}
    
    	$user_permsArr = array_merge($user_permsArr, $this->get_group_permissions());
    
    	return $user_permsArr;
    }
    
    /**
     * get user contact
     * 
     * @return Contact
     */
    public function get_contact() {
    	return Doctrine_Query::create()
	    	->from('Contact c')
	    	->leftJoin('c.Types')
	    	->where('c.id = ?', $this->contact_id)
	    	->fetchOne();
    }    
    
    /**
     * user encrypted password
     * @param string $password
     * @return string
     */ 
    public static function get_encrypted_password($password = false){
    	if (is_array($password)) $password = $password[0];
    	return sha1($password.pjango_ini_get('SECRET_KEY'));
    }    
	
    /**
     * getting group permissions user 
     *
     * @return Array user group permissions
     */    
	function get_group_permissions() {
		$permsArr = array();
		
		if ($this->is_superuser){
		    	/*
		    foreach ($perms as $perm) {
		    	$permsArr[] = sprintf('%s.%s', $perm->ContentType->app_label, $perm->codename);
		    }		*/    
		}else {
			foreach ($this->Groups as $group_item) {
				foreach ($group_item->GroupPermissions as $group_permission_item) {
					$permission_item = $group_permission_item->Permission;					
					$key = sprintf('%s.%s', $permission_item->ContentType->app_label, $permission_item->codename);
					$permsArr[$key] = true;
				}
			}
		}
		
		return $permsArr;		
	}
	
	public function get_profile_url() {
	    return '';
	}
	
	public function get_profile_image() {
	    return pjango_ini_get('MEDIA_URL').'/img/no-profile.jpg';
	}	
	
	/**
	 * user uniq key
	 *
	 * @return string
	 */
	function get_uniq_key() {
		$hashstr = $this->username.$this->email.$this->date_joined;
		$hash = base64_encode(pack('H*',sha1($hashstr)));
		return $hash;
	}		
	
	/**
	 * user has a group
	 *
	 * @param string $group
	 * @return boolean
	 */	
	function has_group($group) {		
		$group = Doctrine_Query::create()
			->from('Group g')
			->leftJoin('g.Users u')
			->where('g.site_id = ? AND g.name = ? AND u.id = ?', array(1, $group, $this->id))
			->fetchOne();
		
		if($group) return true;
		return false;		
	}
	
	/**
	 * user has a permission
	 *
	 * @param string $perm
	 * @return boolean
	 */	
	function has_perm($perm) {
		if ($this->is_superuser == 1) return true;
		
		$allPerm = $this->get_all_permissions();
		
		foreach ($allPerm as $key => $value) {
			if ($key==$perm) return $value;
		}
		
		return false;
	}
	
	/**
	 * user authentication status
	 * 
	 * @return boolean
	 */	
	function is_authenticated() {
		if ($this->id > 0) return true;
		else return false;
	}
	
    /**
     * send registraion email
     * @param string $password
     * @return string
     */ 
	public function send_registration_email() {
		$mail = get_mailer('smtp');
		$mail->Subject = sprintf('%s %s',$mail->Subject,__('New Registration'));
		$mail->MsgHTML(render_to_response('mail/registration.html', array('registration_user'=>$this), true));
		$mail->AddAddress($this->email, $this->displayname);
		$mail->Send();
	}	
	
	
	/**
	 * setting cookie
	 */	
	public function set_cookie() {
		$pt = PjangoToken::make_token('User', $this->id);
		$pt->save();
	
		setcookie("rme", $pt->token, $expireTime);
	}	

	/**
	 * @deprecated deprecated since version 2.0
	 * @see User::change_password()
	 */
	function changePassword($newPassword) {
		self::change_password($newPassword);
	}
	
	/**
	 * @deprecated deprecated since version 2.0
	 * @see User::current_user()
	 */
	public static function get_current() {
		return self::current_user();
	}	
	
	/**
	 * @deprecated deprecated since version 2.0
	 * @see User::get_encrypted_password()
	 */
	public static function getEncryptedPassword($password = false){
		return self::get_encrypted_password($password);
	}	
	
	
	/**
	 * @deprecated deprecated since version 2.0
	 * @see User::get_uniq_key()
	 */	
	function generateUniqKey() {
		return self::get_uniq_key();
	}	
		
	/**
	 * @deprecated deprecated since version 2.0
	 * @see User::send_registraion_email()
	 */	
	public function sendRegistraionEmail() {	    
	    self::send_registration_email();
	}



}