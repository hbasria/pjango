<?php

/**
 * User
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class User extends BaseUser
{
    public static function get_content_type_id() {
        return ContentType::get_for_model('User')->id;
    }
    
	public static function findAllAsChoice() {
		$choicesArr = Doctrine_Query::create()
			->select('o.id, o.displayname')
		    ->from('User o')
		    ->fetchArray();
		    
		$choices = array('-' => '----------');
		foreach ($choicesArr as $value) {
			$choices[$value['id']] =  $value['displayname'];
		}
		
		return $choices;
	}
	
	public static function getEncryptedPassword($password = false){
	    if (is_array($password)) $password = $password[0];
	    return sha1($password.pjango_ini_get('SECRET_KEY'));
	}
	
	public static function authenticate($username = false, $password = false, $userId = false){
	    
	    $q = Doctrine_Query::create()
	        ->from('User u');
	    
	    if($userId){
	        $q->addWhere('u.id = ? AND u.is_active = ?', array($userId,1));
	    }else {
	        $q->addWhere('u.password = ? AND u.is_active = ?', array($password,1));
	        $q->addWhere('u.username = ? OR u.email = ?', array($username,$username));	         	        
	    }
	    
	    $user = $q->fetchOne();
	    
	    if (!$user) throw new Exception(pjango_gettext('Authentication failed'));
	    
	    //cooki set et beni hatırla için
	    if (isset($_POST['remember_me'])){
	        $user->setCookie();
	    }	

	    $user->last_login = date('Y-m-d H:i:s');
	    $user->save();
	    
	    $_SESSION['user'] = serialize($user);
	    
	    return $user;
	}	
	
	function get_group_permissions() {
		$permsArr = array();
		
		if ($this->is_superuser){
		    	/*
		    foreach ($perms as $perm) {
		    	$permsArr[] = sprintf('%s.%s', $perm->ContentType->app_label, $perm->codename);
		    }		*/    
		}else {
			foreach ($this->Groups as $group_item) {
				foreach ($group_item->GroupPermissions as $group_permission_item) {
					$permission_item = $group_permission_item->Permission;					
					$key = sprintf('%s.%s', $permission_item->ContentType->app_label, $permission_item->codename);
					$permsArr[$key] = true;
				}
			}
		}
		
		return $permsArr;		
	}
	
	function get_all_permissions() {
		$user_permsArr = array();
		
		foreach ($this->Permissions as $perm) {
			$key = sprintf('%s.%s', $perm->ContentType->app_label, $perm->codename);
			$user_permsArr[$key] = true;
		}
		
		$user_permsArr = array_merge($user_permsArr, $this->get_group_permissions());
		
		
		
		return $user_permsArr;
	}
	
	function has_perm($perm) {
		if ($this->is_superuser == 1) return true;
		
		$allPerm = $this->get_all_permissions();
		
		foreach ($allPerm as $key => $value) {
			if ($key==$perm) return $value;
		}
		
		return false;
	}
	
	function is_authenticated() {
		if ($this->id > 0) return true;
		else return false;
	}
	
	function generateUniqKey() {
		$hashstr = $this->username.$this->email.$this->date_joined;
		$hash = base64_encode(pack('H*',sha1($hashstr)));
		return $hash;
	}
	
	function changePassword($newPassword) {
	    //FIXME istenilen şifreleme ile 
		$this->password = self::getEncryptedPassword($newPassword);
		$this->save();
	}	

	public function setCookie() {
		$pt = PjangoToken::make_token('User', $this->id);
		$pt->save();
		
		setcookie("rme", $pt->token, $expireTime);
	}	
	
	public function get_profile_url() {
	    return '';
	}	

	public function get_profile_image() {	    
	    return pjango_ini_get('MEDIA_URL').'/img/no-profile.jpg';
	}	

}